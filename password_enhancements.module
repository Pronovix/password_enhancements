<?php

/**
 * @file
 * Password related enhancements.
 */

use Drupal\Component\Render\FormattableMarkup;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Access\AccessResultInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\password_enhancements\ConfigTranslation\ConstraintMapper;
use Drupal\password_enhancements\Plugin\Exception\PasswordConstraintPluginValidationException;
use Drupal\user\UserInterface;

/**
 * Implements hook_theme().
 */
function password_enhancements_theme($existing, $type, $theme, $path): array {
  return [
    'password_enhancements_error_messages' => [
      'variables' => [
        'attributes' => NULL,
        'messages' => [],
        'title' => '',
        'title_attributes' => NULL,
      ],
    ],
    'password_enhancements_policy_constraint' => [
      'variables' => [
        'description' => '',
        'attributes' => NULL,
      ],
    ],
    'password_enhancements_policy_constraints' => [
      'variables' => [
        'attributes' => NULL,
        'constraints' => [],
        'descriptions' => [],
        'title' => '',
        'title_attributes' => [],
      ],
    ],
    'password_enhancements_logged_out_message' => [
      'variables' => [
        'attributes' => NULL,
        'message' => '',
      ],
    ],
  ];
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function password_enhancements_form_user_form_alter(&$form, FormStateInterface $form_state, string $form_id): void {
  if ($form_id === 'user_register_form') {
    $config = \Drupal::config('password_enhancements.settings');
    if (empty($form['account']['pass']) && !empty($config->get('require_password'))) {
      $form['account']['pass'] = [
        '#type' => 'password_confirm',
        '#size' => 25,
        '#description' => t('Provide a password for the new account in both fields.'),
        '#required' => TRUE,
      ];
      $form['actions']['submit']['#submit'][] = 'password_enhancements_form_user_register_form_alter_password_required_submit';
    }
  }

  _password_enhancements_user_form_apply_password_policy_validation($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function password_enhancements_form_password_enhancements_change_form_alter(&$form, FormStateInterface $form_state, $form_id): void {
  _password_enhancements_user_form_apply_password_policy_validation($form, $form_state);
}

/**
 * Apply password policy validation on user forms.
 *
 * @param array $form
 *   The form for which the password requirements validation should be added.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current form state.
 */
function _password_enhancements_user_form_apply_password_policy_validation(array &$form, FormStateInterface $form_state): void {
  // If the password form element is not visible then there is nothing to do.
  if (empty($form['account']['pass'])) {
    return;
  }

  _password_enhancements_user_form_prepare_form_for_password_policy($form, $form_state);

  // Get the selected roles.
  $selected_user_roles = _password_enhancements_get_roles_from_form_state($form, $form_state);
  // Try to load policy by its role and priority.
  try {
    /** @var \Drupal\password_enhancements\Entity\Storage\PolicyEntityStorageInterface $password_policy_storage */
    $password_policy_storage = \Drupal::entityTypeManager()->getStorage('password_enhancements_policy');
    /** @var \Drupal\password_enhancements\Entity\PolicyInterface|null $policy */
    $policy = $password_policy_storage->loadByRoleAndPriority($selected_user_roles);

    // No password policy configured for the selected roles, there is
    // nothing to do.
    if ($policy === NULL) {
      return;
    }

    // Get constraint plugin settings.
    $plugin_settings = _password_enhancements_get_plugin_settings($selected_user_roles);
    // Hide the fieldset if applied policies contain no constraints.
    if (empty($plugin_settings['configs'])) {
      $form['account']['password_policy_constraints']['#attributes']['style'] = 'display: none;';
    }
    else {
      unset($form['account']['password_policy_constraints']['#attributes']['style']);
      $form['account']['password_policy_constraints']['#constraints'] = $plugin_settings['constraints'];
      $form['account']['password_policy_constraints']['#attached']['library'] = array_merge(['password_enhancements/requirements'], $plugin_settings['libraries']);
      $form['account']['password_policy_constraints']['#attached']['drupalSettings']['passwordEnhancementsConstraint']['plugins'] = $plugin_settings['configs'];
      $form['account']['password_policy_constraints']['#attached']['drupalSettings']['passwordEnhancementsConstraint']['minimumRequiredConstraints'] = $policy->getMinimumRequiredConstraints();
    }
  }
  catch (\Exception $e) {
    \Drupal::service('logger.password_enhancements')->logException("Failed to load policy and constraints on the '{$form_state->getFormObject()->getFormId()}' form.", $e);
    \Drupal::messenger()->addError(t('Password field cannot be validated at this moment. The form is temporarily disabled. Try to refresh the page. If this problem persists, please contact with the site administrators.'));
    // Disable all form elements, do not allow user to submit the form.
    foreach (Element::children($form) as $element) {
      $form[$element]['#disabled'] = TRUE;
    }
  }

}

/**
 * Apply all required changes on user forms by this module.
 *
 * These changes have to be made on all forms, even if there is no password
 * policy configured because these changes cannot be added later, for example
 * when a user adds selects a new role on the form.
 *
 * @param array $form
 *   The form for which the password requirements validation should be added.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current form state.
 */
function _password_enhancements_user_form_prepare_form_for_password_policy(array &$form, FormStateInterface $form_state): void {
  // Sanity check, if the password form element is not visible then there is
  // nothing to do.
  if (empty($form['account']['pass'])) {
    return;
  }

  $weight = 0;
  // Ensure all account form elements have a weight.
  foreach (Element::children($form['account']) as $key) {
    if (!array_key_exists('#weight', $form['account'][$key])) {
      $form['account'][$key]['#weight'] = $weight++;
    }
  }

  // Set wrapper for the constraints.
  $ajax_wrapper = 'password-policy-constraint-ajax-wrapper';
  // Initialize form element with sane default values.
  $form['account']['password_policy_constraints'] = [
    '#theme' => 'password_enhancements_policy_constraints',
    '#title' => t('Password requirements'),
    '#constraints' => [],
    '#weight' => $form['account']['pass']['#weight'] + 0.001,
    '#prefix' => "<div id='{$ajax_wrapper}'>",
    '#suffix' => '</div>',
    '#attached' => [
      'library' => ['password_enhancements/requirements'],
      'drupalSettings' => [
        'passwordEnhancementsConstraint' => [
          'updateEffect' => \Drupal::config('password_enhancements.settings')->get('constraint_update_effect'),
          'plugins' => [],
          'minimumRequiredConstraints' => 0,
        ],
      ],
    ],
    '#attributes' => [
      'id' => 'password-policy-constraints',
    ] + (empty($form['account']['pass']['#required']) ? ['style' => 'display: none;'] : []),
    '#title_attributes' => [
      'class' => ['title'],
    ],
  ];

  // Add ajax callback for role change to update the policies for the selected
  // role(s).
  if (!empty($form['account']['roles'])) {
    $form['account']['roles']['#ajax'] = [
      'callback' => 'password_enhancements_update_constraints_by_roles',
      'event' => 'change',
      'wrapper' => $ajax_wrapper,
    ];
  }
  $form['#validate'][] = 'password_enhancements_form_user_register_form_alter_validate';
}

/**
 * Get roles from the form state.
 *
 * @param array $form
 *   The current form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state.
 *
 * @return array
 *   The set roles on the form.
 */
function _password_enhancements_get_roles_from_form_state(array $form, FormStateInterface $form_state) {
  $roles = $form_state->getValue('roles') ?: [];
  $input = $form_state->getUserInput();
  // If there was no input then grab the default roles.
  if (empty($roles) && empty($input['roles']) && !empty($form['account']['roles']['#default_value'])) {
    $roles = $form['account']['roles']['#default_value'];
  }
  return array_merge([AccountInterface::AUTHENTICATED_ROLE], $roles, (!empty($input['roles']) ? array_values($input['roles']) : []));
}

/**
 * Gets constraint plugin settings.
 *
 * @param array $roles
 *   The roles for which the plugin settings needs to be loaded.
 *
 * @return array
 *   The constraint plugin settings.
 */
function _password_enhancements_get_plugin_settings(array $roles) {
  /** @var \Drupal\password_enhancements\Entity\Storage\ConstraintEntityStorageInterface $constraint_storage */
  $constraint_storage = \Drupal::entityTypeManager()->getStorage('password_enhancements_constraint');
  $constraints = $constraint_storage->loadByRoles($roles);

  $processed_constraints = [];
  $libraries = [];
  /** @var \Drupal\password_enhancements\PasswordConstraintPluginManager $plugin_manager */
  $plugin_manager = \Drupal::service('plugin.manager.password_constraint');
  $plugin_configs = [];
  foreach ($constraints as $id => $constraint) {
    // Replace dot in the constraint's ID with a dash to make it more JS/CSS
    // friendly.
    $id = str_replace('.', '-', $constraint->id());

    $type = $constraint->getType();

    /** @var \Drupal\password_enhancements\Plugin\PasswordConstraintPluginInterface $plugin_instance */
    $plugin_instance = $plugin_manager->createInstance($type, $constraint->getConfiguration());
    $initial_description = $plugin_instance->getInitialDescription();

    // Get JS library if set.
    $plugin_definition = $plugin_manager->getDefinition($type);
    if (!empty($plugin_definition['jsLibrary'])) {
      $libraries[] = $plugin_definition['jsLibrary'];
    }
    $plugin_configs[$type][$id] = $constraint->getConfiguration();

    $arguments = [];
    foreach ($constraint->getSettings() as $setting => $value) {
      $arguments["@{$setting}"] = new FormattableMarkup('<span data-setting="@setting">@value</span>', [
        '@setting' => $setting,
        '@value' => $value,
      ]);
    }

    $processed_constraints[] = [
      '#theme' => 'password_enhancements_policy_constraint',
      '#description' => strtr($initial_description, $arguments),
      '#attributes' => [
        'id' => $id,
        'class' => ['constraint'],
        'data-required' => $constraint->isRequired() ? 'yes' : 'no',
        'data-validation-passed' => 'no',
        'data-constraint' => $constraint->getType(),
      ],
    ];
    unset($constraints[$constraint->id()]);
  }

  return [
    'configs' => $plugin_configs,
    'constraints' => $processed_constraints,
    'libraries' => $libraries,
  ];
}

/**
 * Validate callback for password_enhancements_form_user_register_form_alter().
 *
 * @param array $form
 *   The form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current form state.
 */
function password_enhancements_form_user_register_form_alter_validate(array &$form, FormStateInterface $form_state): void {
  $password = $form_state->getValue('pass');
  // Password field was not visible on the page, there is nothing to do.
  if (empty($password)) {
    return;
  }

  $roles = $form_state->getValue('roles') ?: [];

  // Try to load policy by it's role and priority.
  try {
    $entity_type_manager = \Drupal::entityTypeManager();
    /** @var \Drupal\password_enhancements\Entity\Storage\PolicyEntityStorageInterface $password_policy_storage */
    $password_policy_storage = $entity_type_manager->getStorage('password_enhancements_policy');
    $policy = $password_policy_storage->loadByRoleAndPriority($roles);

    // Load constraints if there a policy exist for the given roles.
    if ($policy !== NULL) {
      /** @var \Drupal\password_enhancements\Entity\Storage\ConstraintEntityStorageInterface $constraint_storage */
      $constraint_storage = $entity_type_manager->getStorage('password_enhancements_constraint');
      $constraints = $constraint_storage->loadByRoles($roles);
    }
  }
  catch (\Exception $e) {
    \Drupal::service('logger.password_enhancements')->logException('Failed to load policy and constraints.', $e);
    $form_state->setError($form['account']['pass'], t('Password validation error: failed to load policy and constraints.<br>Changing the password is not possible at the moment, please try again later.'));
    return;
  }

  // If no constraints are defined then we have nothing to do here.
  if (empty($constraints)) {
    return;
  }

  // Get constraints and count the minimum required constraints.
  $constraints_count = count($constraints);
  $minimum_required_constraints = $policy->getMinimumRequiredConstraints();
  $minimum_required_constraints = $constraints_count < $minimum_required_constraints ? $constraints_count : $minimum_required_constraints;

  // Validate password against the defined constraints.
  $error_message_collection = [
    'optional' => [],
    'required' => [],
  ];
  $valid_required_count = 0;
  $valid_optional_count = 0;
  $plugin_manager = \Drupal::service('plugin.manager.password_constraint');
  foreach ($constraints as $constraint) {
    /** @var \Drupal\password_enhancements\Plugin\PasswordConstraintPluginInterface $plugin_instance */
    $plugin_instance = $plugin_manager->createInstance($constraint->getType(), $constraint->getConfiguration());
    $is_required = $constraint->isRequired();
    try {
      $plugin_instance->validate($password);

      // Count valid constraints.
      if ($is_required) {
        $valid_required_count++;
      }
      else {
        $valid_optional_count++;
      }
    }
    catch (PasswordConstraintPluginValidationException $e) {
      $error_message_collection[$is_required ? 'required' : 'optional'][] = $e->getMessage();
    }
  }

  // Collect error messages.
  $error_messages = [];
  if (($valid_required_count + $valid_optional_count) < $minimum_required_constraints) {
    $error_messages = array_merge($error_message_collection['required'], $error_message_collection['optional']);
  }
  elseif ($valid_required_count === 0 && $error_message_collection['required'] === [] && $valid_optional_count < $minimum_required_constraints) {
    $error_messages = &$error_message_collection['optional'];
  }
  elseif ($error_message_collection['required'] !== []) {
    $error_messages = &$error_message_collection['required'];
  }

  // Set form error and show the error message if there is any.
  if ($error_messages !== []) {
    $messages = [
      '#theme' => 'password_enhancements_error_messages',
      '#title' => t("The given password doesn't meet some requirements:"),
      '#messages' => $error_messages,
      '#attributes' => [
        'class' => ['password-error-messages'],
      ],
      '#title_attributes' => [
        'class' => ['title', 'password-error-message'],
      ],
    ];
    $form_state->setError($form['account']['pass'], \Drupal::service('renderer')->render($messages));
  }
}

/**
 * Submit callback for password_enhancements_form_user_register_form_alter().
 *
 * This callback runs only if the password field was set to always required and
 * the verify_email set to true.
 *
 * This extra submit callback is required because if the verify_email is set to
 * TRUE then by default Drupal generates a random password so we have to make
 * sure the password from the input is being set instead of the random generated
 * password.
 *
 * @param array $form
 *   The form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current form state.
 */
function password_enhancements_form_user_register_form_alter_password_required_submit(array &$form, FormStateInterface $form_state): void {
  /** @var \Drupal\user\UserInterface $user */
  if (!empty($form['account']['pass'])) {
    /** @var \Drupal\Core\Entity\EntityFormInterface $form_object */
    $form_object = $form_state->getFormObject();
    $user = $form_object->getEntity();

    try {
      $user->setPassword($form_state->getUserInput()['pass']['pass1'])->save();
    }
    catch (\Exception $e) {
      \Drupal::service('logger.password_enhancements')->logException('Failed to set password for the user at registration.', $e);
      \Drupal::messenger()->addError(t('Failed to set your password, please <a href="@url">reset your password</a>.', [
        '@url' => Url::fromRoute('user.pass')->toString(),
      ]));
    }
  }
}

/**
 * Ajax callback for updating the constraints on role change.
 *
 * @param array $form
 *   The form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current form state.
 *
 * @return array
 *   Renderable form array for password policy constraints.
 */
function password_enhancements_update_constraints_by_roles(array $form, FormStateInterface $form_state): array {
  return $form['account']['password_policy_constraints'];
}

/**
 * Implements hook_entity_base_field_info().
 */
function password_enhancements_entity_base_field_info(EntityTypeInterface $entity_type): array {
  $fields = [];

  if ($entity_type->id() === 'user') {
    $fields['password_enhancements_password_changed_date'] = BaseFieldDefinition::create('datetime')
      ->setLabel(t('Last password change'))
      ->setDescription(t('The last time when the user has changed the password.'))
      ->setDefaultValue(0);

    $fields['password_enhancements_password_change_required'] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('Password change required'))
      ->setDescription(t('Forces the user to change the password.<br><strong>Warning:</strong> If it is checked, the user will be redirected to the password change form.'))
      ->setDefaultValue(0)
      ->setDisplayOptions('form', [
        'type' => 'boolean_checkbox',
        'settings' => [
          'display_label' => TRUE,
        ],
        'weight' => 99,
      ]);
  }

  return $fields;
}

/**
 * Implements hook_entity_field_access().
 */
function password_enhancements_entity_field_access($operation, FieldDefinitionInterface $field_definition, AccountInterface $account, FieldItemListInterface $items = NULL): AccessResultInterface {
  if ($field_definition->getName() == 'password_enhancements_password_change_required') {
    $permission_result = AccessResult::allowedIfHasPermission($account, 'administer user password enhancements settings');
    return $permission_result->isAllowed() ? AccessResult::allowed() : AccessResult::forbidden($permission_result->getReason());
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function password_enhancements_user_presave(UserInterface $user): void {
  // Update the last password changed date if the password was changed.
  if (empty($user->original) || $user->original->pass->value !== $user->pass->value) {
    $user->get('password_enhancements_password_changed_date')->setValue(\Drupal::time()->getRequestTime());
  }
}

/**
 * Implements hook_user_login().
 */
function password_enhancements_user_login(UserInterface $user): void {
  $policy = Drupal::service('entity_type.manager')->getStorage('password_enhancements_policy')->loadByRoleAndPriority($user->getRoles());
  $is_password_change_required = $user->get('password_enhancements_password_change_required')->getValue() ? (bool) $user->get('password_enhancements_password_change_required')->getValue()[0]['value'] : FALSE;
  if ($is_password_change_required || ($policy !== NULL && \Drupal::service('password_enhancements.password_checker')->isExpired($policy))) {
    // Set a session attribute to indicate that the user has just logged in
    // and don't require providing the password again on the password change
    // form.
    \Drupal::service('session_manager')
      ->getBag('attributes')
      ->getBag()
      ->set('password_enhancements_login_password_change_required', TRUE);
  }
}

/**
 * Implements hook_legal_allowed_paths_alter().
 */
function password_enhancements_legal_allowed_paths_alter(array &$allowed_paths): void {
  $allowed_paths[] = Url::fromRoute('password_enhancements.password_change')->toString();
}

/**
 * Implements hook_config_translation_info_alter().
 */
function password_enhancements_config_translation_info_alter(&$info): void {
  $info['password_enhancements_constraint']['class'] = ConstraintMapper::class;
}
