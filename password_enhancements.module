<?php

/**
 * @file
 * Password related enchantments.
 */

use Drupal\Component\Render\FormattableMarkup;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Session\AccountInterface;
use Drupal\password_enhancements\Form\Settings;
use Drupal\user\UserInterface;

/**
 * Implements hook_theme().
 */
function password_enhancements_theme($existing, $type, $theme, $path): array {
  return [
    'password_enhancements_error_messages' => [
      'variables' => [
        'error_message' => '',
        'messages' => [],
      ],
    ],
    'password_enhancements_policy_constraints' => [
      'variables' => [
        'constraints' => [],
        'descriptions' => [],
        'hidden' => FALSE,
      ],
    ],
    'password_enhancements_logged_out_message' => [
      'variables' => [
        'message' => '',
      ],
    ],
  ];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function password_enhancements_form_user_form_alter(&$form, FormStateInterface $form_state, string $form_id): void {
  password_enhancements_form_user_register_form_alter($form, $form_state, $form_id);
  $form['password_change_required']['#access'] = Drupal::currentUser()->hasPermission('administer user password settings');
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function password_enhancements_form_password_enhancements_change_form_alter(&$form, FormStateInterface $form_state, $form_id): void {
  password_enhancements_form_user_register_form_alter($form, $form_state, $form_id);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function password_enhancements_form_user_register_form_alter(array &$form, FormStateInterface $form_state, string $form_id): void {
  if (empty($form['account']['pass'])) {
    /** @var \Drupal\Core\Config\Config $config */
    $config = Drupal::service('config.factory')->get('password_enhancements.settings');
    if (empty($config->get('require_password'))) {
      // No password field available, nothing to do here.
      return;
    }

    $form['account']['pass'] = [
      '#type' => 'password_confirm',
      '#size' => 25,
      '#description' => t('Provide a password for the new account in both fields.'),
      '#required' => TRUE,
    ];
    $form['actions']['submit']['#submit'][] = 'password_enhancements_form_user_register_form_alter_password_submit';
  }

  // Add weight for account fields.
  $weight = 0;
  foreach (Element::children($form['account']) as $key) {
    if (!array_key_exists('#weight', $form['account'][$key])) {
      $form['account'][$key]['#weight'] = $weight++;
    }
  }

  // Get roles.
  $roles = $form_state->getValue('roles') ?? [];
  $input = $form_state->getUserInput();
  // If there was no input then grab the default roles.
  if (empty($roles) && empty($input['roles']) && !empty($form['account']['roles']['#default_value'])) {
    $roles = $form['account']['roles']['#default_value'];
  }
  $roles = array_merge([AccountInterface::AUTHENTICATED_ROLE], $roles, (!empty($input['roles']) ? array_values($input['roles']) : []));

  $constraints = _password_enhancements_get_constraints($roles);
  $processed_constraints = [];
  $descriptions = [];
  $libraries = [
    'password_enhancements/requirements',
  ];
  /** @var \Drupal\password_enhancements\PasswordConstraintPluginManager $plugin_manager */
  $plugin_manager = Drupal::service('plugin.manager.password_constraint');
  $plugin_config = [];
  foreach ($constraints as $id => $constraint) {
    // Replace dot in the constraint's ID with a dash to make it more JS/CSS
    // friendly.
    $id = str_replace('.', '-', $constraint->id());

    $type = $constraint->getType();

    /** @var \Drupal\password_enhancements\Plugin\PasswordConstraintPluginInterface $plugin_instance */
    $plugin_instance = $plugin_manager->createInstance($type, $constraint->getConfiguration());

    // Get JS library if set.
    $plugin_definition = $plugin_manager->getDefinition($type);
    if (!empty($plugin_definition['jsLibrary'])) {
      $libraries[] = $plugin_definition['jsLibrary'];
    }
    $plugin_config[$type][$id] = $constraint->getConfiguration();

    $arguments = [];
    foreach ($constraint->getSettings() as $setting => $value) {
      $arguments["@{$setting}"] = new FormattableMarkup('<span data-setting="@setting">@value</span>', [
        '@setting' => $setting,
        '@value' => $value,
      ]);
    }

    $descriptions[$id] = strtr($plugin_instance->getInitialDescription(), $arguments);

    $processed_constraints[$id] = $constraint;
    unset($constraints[$constraint->id()]);
  }

  /** @var \Drupal\password_enhancements\Entity\Storage\PolicyEntityStorageInterface $password_policy_storage */
  $password_policy_storage = Drupal::entityTypeManager()->getStorage('password_enhancements_policy');
  $policy = $password_policy_storage->loadByRoleAndPriority($roles);

  if ($policy != NULL) {
    $ajax_wrapper = 'password-policy-constraint-ajax-wrapper';
    $form['account']['password_policy_constraints'] = [
      '#theme' => 'password_enhancements_policy_constraints',
      '#constraints' => $processed_constraints,
      '#descriptions' => $descriptions,
      '#hidden' => empty($form['account']['pass']['#required']),
      '#weight' => $form['account']['pass']['#weight'] + 0.001,
      '#attached' => [
        'library' => $libraries,
        'drupalSettings' => [
          'passwordEnhancementsConstraint' => [
            'updateEffect' => Drupal::configFactory()->get('password_enhancements.settings')->get('constraint_update_effect') ?? Settings::CONSTRAINT_EFFECT_STRIKETHROUGH,
            'plugins' => $plugin_config,
            'minimumRequiredConstraints' => $policy->getMinimumRequiredConstraints(),
          ],
        ],
      ],
      '#prefix' => "<div id='{$ajax_wrapper}'>",
      '#suffix' => '</div>',
    ];

    if (!empty($form['account']['roles'])) {
      $form['account']['roles']['#ajax'] = [
        'callback' => 'password_enhancements_update_constraints_by_roles',
        'event' => 'change',
        'wrapper' => $ajax_wrapper,
      ];
    }
  }

  $form['#validate'][] = 'password_enhancements_form_user_register_form_alter_validate';
}

/**
 * Validate callback for password_enhancements_form_user_register_form_alter().
 *
 * @param array $form
 *   The form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current form state.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Component\Plugin\Exception\PluginException
 */
function password_enhancements_form_user_register_form_alter_validate(array &$form, FormStateInterface $form_state): void {
  if (!empty($password = $form_state->getValue('pass'))) {
    $roles = $form_state->getValue('roles') ?? [];

    /** @var \Drupal\password_enhancements\Entity\Storage\PolicyEntityStorageInterface $password_policy_storage */
    $password_policy_storage = Drupal::entityTypeManager()->getStorage('password_enhancements_policy');
    $policy = $password_policy_storage->loadByRoleAndPriority($roles);

    $constraints = _password_enhancements_get_constraints($roles);
    $error_messages = [];
    $minimum_required_constraints = $policy->getMinimumRequiredConstraints();
    $valid_count = 0;
    foreach ($constraints as $constraint) {
      /** @var \Drupal\password_enhancements\Plugin\PasswordConstraintPluginInterface $plugin_instance */
      $plugin_instance = Drupal::service('plugin.manager.password_constraint')->createInstance($constraint->getType(), $constraint->getConfiguration());

      if (!$plugin_instance->validate($password)) {
        $error_messages[] = $plugin_instance->getErrorMessage();
      }
      else {
        $valid_count++;
      }

      if ($minimum_required_constraints <= $valid_count) {
        break;
      }
    }

    // Display any validation error messages.
    if ($error_messages !== [] && $valid_count < $minimum_required_constraints) {
      $messages = [
        '#theme' => 'password_enhancements_error_messages',
        '#error_message' => t("The given password doesn't meet some requirements:"),
        '#messages' => $error_messages,
      ];
      $form_state->setError($form['account']['pass'], Drupal::service('renderer')->render($messages));
    }
  }
}

/**
 * Submit callback for password_enhancements_form_user_register_form_alter().
 *
 * This callback runs only if the password field was set to always require and
 * the verify_email set to true.
 *
 * @param array $form
 *   The form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current form state.
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 *   If the user was failed to save.
 */
function password_enhancements_form_user_register_form_alter_password_submit(array &$form, FormStateInterface $form_state): void {
  /** @var \Drupal\user\UserInterface $user */
  $user = $form_state->getFormObject()->getEntity();
  $user->setPassword($form_state->getUserInput()['pass']['pass1'])
    ->save();
}

/**
 * Get password policy constraints by the given roles.
 *
 * @param array $roles
 *   The roles for which the constraints needs to be loaded.
 *
 * @return \Drupal\password_enhancements\Entity\Constraint[]
 *   Constraint list.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function _password_enhancements_get_constraints(array $roles): array {
  // Get entity type manager.
  $entity_type_manager = Drupal::entityTypeManager();

  // Load password policies by their priority.
  /** @var \Drupal\password_enhancements\Entity\Storage\PolicyEntityStorageInterface $password_policy_storage */
  $password_policy_storage = $entity_type_manager->getStorage('password_enhancements_policy');
  $policies = $password_policy_storage->loadMultipleByRoleAndPriority($roles);

  // Load password constraints.
  /** @var \Drupal\password_enhancements\Entity\Constraint[] $constraints */
  $constraints = $entity_type_manager->getStorage('password_enhancements_constraint')
    ->loadByProperties([
      'policy' => array_keys($policies),
    ]);

  // Get constrains ordered by the policy's priority.
  // If a constraint is defined in a higher priority policy then the constraints
  // defined on the lower priority will be overridden based on their type.
  // Non-unique constrains from the same policy won't override each other,
  // although if a higher priority policy's constraint defines that specific
  // type then it will override each non-unique constraint from the lower
  // priority from the same type.
  $checked_constraints = [];
  $constraint_list = [];
  foreach ($policies as $policy) {
    $usable_constraints_by_policy = [];

    foreach ($constraints as $constraint_id => $constraint) {
      if ($constraint->getPolicy() == $policy->id()) {
        $type = $constraint->getType();

        if (!array_key_exists($type, $checked_constraints)) {
          $usable_constraints_by_policy[$type] = TRUE;
          $constraint_list[$constraint_id] = $constraint;
        }

        // Remove already checked constraint.
        unset($constraints[$constraint_id]);
      }
    }

    $checked_constraints += $usable_constraints_by_policy;
  }

  return $constraint_list;
}

/**
 * Ajax callback for updating the constraints on role change.
 *
 * @param array $form
 *   The form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current form state.
 *
 * @return array
 *   Renderable form array for password policy constraints.
 */
function password_enhancements_update_constraints_by_roles(array $form, FormStateInterface $form_state): array {
  return $form['account']['password_policy_constraints'];
}

/**
 * Implements hook_entity_base_field_info().
 */
function password_enhancements_entity_base_field_info(EntityTypeInterface $entity_type): array {
  $fields = [];

  if ($entity_type->id() == 'user') {
    $fields['password_changed'] = BaseFieldDefinition::create('datetime')
      ->setLabel(t('Last password change'))
      ->setDescription(t('The last time when the user has changed the password.'))
      ->setDefaultValue(0);

    $fields['password_change_required'] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('Password change required'))
      ->setDescription(t('Forces the user to change the password.<br><strong>Warning:</strong> This also causes to force logout the user.'))
      ->setDefaultValue(0)
      ->setDisplayOptions('form', [
        'type' => 'boolean_checkbox',
        'settings' => [
          'display_label' => TRUE,
        ],
        'weight' => 99,
      ]);
  }

  return $fields;
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function password_enhancements_user_presave(EntityInterface $entity) {
  // Update the last password changed date.
  if ($entity->bundle() == 'user' && (empty($entity->original) || $entity->original->pass->value != $entity->pass->value)) {
    $entity->password_changed->setValue(Drupal::time()->getRequestTime());
  }
}

/**
 * Implements hook_user_login().
 */
function password_enhancements_user_login(UserInterface $user): void {
  // Load password policies by their priority.
  /** @var \Drupal\password_enhancements\Entity\Storage\PolicyEntityStorageInterface $password_policy_storage */
  $password_policy_storage = Drupal::entityTypeManager()->getStorage('password_enhancements_policy');
  $policy = $password_policy_storage->loadByRoleAndPriority($user->getRoles());
  if ($policy != NULL) {
    /** @var \Drupal\Core\Config\Config $config */
    $config = Drupal::getContainer()->get('config.factory')->get('password_enhancements.settings');

    // Redirect the user to the password change page if the password was expired
    // or it was required by the admin.
    $expire_seconds = $policy->getExpireDays() * 86400;
    $request_time = Drupal::time()->getRequestTime();
    if ((Drupal::request()->get('_route') == 'user.reset.login' && !empty($config->get('require_password_change'))) || $user->password_change_required->value || ($expire_seconds > 0 && (int) $user->password_changed->value < $request_time - $expire_seconds)) {
      Drupal::getContainer()->get('session_manager')
        ->getBag('attributes')
        ->getBag()
        ->set('password_enhancements_password_change_required', TRUE);
    }

    // Set cookie expiry to the same as the password policy's expiry if it is
    // set, otherwise leave it intact.
    // @FIXME: Should we somehow notify the user about the expiration?
    $params = session_get_cookie_params();
    if ($expire_seconds > 0) {
      $lifetime = $expire_seconds - ($request_time - (int) $user->password_changed->value);
      session_set_cookie_params($lifetime > 0 ? $lifetime : 0, $params['path'], $params['domain'], $params['secure'], $params['httponly']);
      Drupal::getContainer()->get('session_manager')->regenerate();
    }
  }
}

/**
 * Implements hook_legal_allowed_paths_alter().
 */
function password_enhancements_legal_allowed_paths_alter(array &$allowed_paths): void {
  $allowed_paths[] = '/user/password-change';
}

/**
 * Implements hook_modules_installed().
 */
function password_enhancements_modules_installed($modules) {
  // Make sure that the translation helper module is also installed when the
  // config_translation is being installed.
  if (in_array('config_translation', $modules)) {
    Drupal::service('module_installer')->install(['password_enhancements_translation_helper']);
  }
}
